  FinalResultCollection = new Mongo.Collection("FinalResultCollection");
  Location = new Mongo.Collection("Location");
  //TimeZone = new Mongo.Collection("TimeZone");
  //TimeZoneCollection = new Mongo.Collection("TimeZoneCollection");

  if (Meteor.isClient) {
    // counter starts at 0
    var counter = 0;

    function successFunction(position) {
    console.log(position);
      var lat = position.coords.latitude;
      var lng = position.coords.longitude;
      convertDMS(lat, lng)
    }

  function errorFunction(){
      alert("Geocoder failed");
    }

    if (navigator.geolocation) { //Get the latitude and the longitude;
      navigator.geolocation.getCurrentPosition(successFunction, errorFunction); 
    } 
  



    function convertDMS( lat, lng ) {  //converting Longitude Latitude to Degree Minute
      
          //lat =  -33.8678500;
          //lng = 151.2073200;
          var convertLat = Math.abs(lat);
          var LatDeg = Math.floor(convertLat);
          var LatSec = (Math.floor((convertLat - LatDeg) * 60));
          var LatCardinal = ((lat > 0) ? 1 : -1);
           
          var convertLng = Math.abs(lng);
          var LngDeg = Math.floor(convertLng);
          var LngSec = (Math.floor((convertLng - LngDeg) * 60));
          var LngCardinal = ((lng > 0) ? 1 : -1);
          var locationObject = {};
          locationObject['Latitude'] = {};
          locationObject['Latitude']['DecimalLatitude'] = lat;      
          locationObject['Latitude']['Degree'] = LatDeg;
          locationObject['Latitude']['Minute'] = LatSec;
          locationObject['Latitude']['Cardinal'] = LatCardinal;
          locationObject['Longitude'] = {}; 
          locationObject['Longitude']['DecimalLongitude'] = lng;
          locationObject['Longitude']['Degree'] = LngDeg;
          locationObject['Longitude']['Minute'] = LngSec;
          locationObject['Longitude']['Cardinal'] = LngCardinal;  
         

            //console.log("Before Deleting"+localStorage.getItem("JSONResponse"));
             
          Meteor.call('DropLocationCollection'); // Removing Old FinalResultCollection from Collection
       
          Location.insert(locationObject);
          weatherAjax(lat,lng,locationObject);

    }

    Meteor.methods({                 // Resetting Old FinalResultCollection from Screen
              getNavyFinalResult: function(){
                console.log(this.isSimulation);
                return null;
              }
      });
    
     function weatherAjax(lat,lng,locationObject){
      var sunnyTime = []
      if(FinalResultCollection.find().count() != 0){
             Meteor.call('removeAllFinalResultCollection');
       }
     $.ajax({
   
          'url' : "http://api.wunderground.com/api/603d511f343b6939/geolookup/hourly/q/"+lat+","+lng+".json",
          'cache' : true,
          'FinalResultCollectionType' : 'jsonp',
          'jsonpCallback' : 'cb',
          'success' : function(FinalResultCollection, textStats, XMLHttpRequest) {
          
          $.each(FinalResultCollection.hourly_forecast,function(key,value){
            
            if(value.wx=="Sunny"){
            var timeFormat = value.FCTTIME.hour+":"+value.FCTTIME.min;          
            sunnyTime.push(timeFormat);
          }     
          })
          console.log(sunnyTime);
          Meteor.call('getTimeZone',function(err,FinalResultCollection){
                if(err){
                  console.log("error")
                  console.log(err);
                }else{
                  console.log(FinalResultCollection)
                  
                  delete Session.keys['FinalResultCollection']; // Stting Session
                  Session.set('FinalResultCollection',FinalResultCollection);
                  
                }
              });

          Meteor.call('getNavyFinalResult',Session.get('FinalResultCollection'),sunnyTime,function(err,result){
            if(err){
              console.log(err)
            }else{
              Meteor.call('DropFinalResultCollection'); // removing old data from the collection
              $.each(result,function(key,value){
                
                FinalResultCollection.insert(value); // inseting into final result collection 
                
               })
            
            }
           });

     
            }
        });
      
    
    }

    Template.list.helpers({
      tasks:function() {
        return FinalResultCollection.find();// Display Template Helper
      }
    }) 

  }


  if (Meteor.isServer) {
    var timezoner = Meteor.npmRequire('timezoner');
    var cheerio = Meteor.npmRequire('cheerio');
    var request = Meteor.npmRequire('request');

      return Meteor.methods({

        DropFinalResultCollection: function() {

          return FinalResultCollection.remove({});

        },

        DropLocationCollection: function() {

          return Location.remove({});

        },

        getTimeZone: function(){

          var locationObjectObject = Location.findOne({});
          //console.log(locationObjectObject);
          var timezoneObject = {}
          
        var timeZoneFunction = Meteor.sync(function(done){
          timezoner.getTimeZone(
            locationObjectObject.Latitude.DecimalLatitude, // Latitude coordinate
            locationObjectObject.Longitude.DecimalLongitude, // Longitude coordinate
            done);
          }
      );
        if(timeZoneFunction.error){
          throw new Meteor.error(404,"Please Provide Valid Longitude Latitude")
        }
        else{
            var timezoneObject = {};
            var timezone = 0;
            var timezoneSign = 0;
            timezone = (timeZoneFunction.result.rawOffset+timeZoneFunction.result.dstOffset)/3600;
            //console.log("this"+timezone);
            if(timezone < 1){
              timezoneSign = -1;
            }else {
              timezoneSign = 1;
            }
            timezoneObject['timezone'] = Math.abs(timezone);
            timezoneObject['timezoneSign'] = timezoneSign;
            console.log(timezoneObject);
            return timezoneObject;
        }
        //return a;
       //return TimeZone.find();
    //callback('tz='+Math.abs(timezone)+'&tz_sign='+timezoneSign+'');
      },
      getNavyFinalResult: function(timezone,sunnyTime){
        console.log(timezone);
        var FinalResultCollection    
        var date = new Date();
        var LocationObject = Location.findOne();

        var url = 'http://aa.usno.navy.mil/cgi-bin/aa_altazw.pl?form=2&body=10&year='+date.getFullYear()+'&month='+date.getMonth()+'&day='+date.getDate()+'&intv_mag=60&place=%28no+name+given%29&lon_sign='+LocationObject.Longitude.Cardinal+'&lon_deg='+LocationObject.Longitude.Degree+'&lon_min='+LocationObject.Longitude.Minute+'&lat_sign='+LocationObject.Latitude.Cardinal+'&lat_deg='+LocationObject.Latitude.Degree+'&lat_min='+LocationObject.Latitude.Minute+'&tz='+timezone.timezone+'&tz_sign='+timezone.timezoneSign+'';
        result = Meteor.http.get(url);
        console.log(url);
        var item1 = [];
        //var FinalResultCollection;
        //console.log(result);
        var $ = cheerio.load(result.content);
        var FinalResultCollection = $('pre').text()
        /*(function(){
          
          FinalResultCollection = $(this).text();
          
         //console.log("Conso"+item1)
          //return item1;

        });*/
      console.log(FinalResultCollection);
      var arr = FinalResultCollection.split("\n");
          for(var i=0;i<arr.length;i++){
            if (arr[i].trim().match(/[0-9]{2}:[0-9]{2}\s[0-9]*\s[0-9]*/)){
              var item = {};
              item.time = arr[i].trim().match(/([0-9]{2}:[0-9]{2})/g)[0].trim();
              item.angle = arr[i].trim().match(/(\s{3,10}-*[0-9]?.*[0-9]*\s)/)[0].trim();
              console.log(sunnyTime.length);
              if(item.angle > 50){
                $.each(sunnyTime,function(key,value){
                    if(value==item.time.trim()){
                      console.log("timeMatches");
                      item1.push(item);
                    }    
                })
                            
              }
            
                
            }

          }
          console.log(item1)
          return item1;
       
      }

        

      });



  }
